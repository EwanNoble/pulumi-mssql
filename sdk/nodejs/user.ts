// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # mssql.User
 *
 * The `mssql.User` resource creates and manages a user on a SQL Server database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 *
 * const example = new mssql.User("example", {
 *     roles: ["db_owner"],
 *     server: {
 *         azureLogin: {
 *             clientId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
 *             clientSecret: "terriblySecretSecret",
 *             tenantId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
 *         },
 *         host: "example-sql-server.database.windows.net",
 *     },
 *     username: "user@example.com",
 * });
 * ```
 *
 * > Note that in order to create an external user referencing an Azure AD entity (user, application), the Azure SQL Server needs to be a member of an Azure AD group assigned the Azure AD role `Directory Readers`. If it is not possible to give the Azure SQL Server this role (through the group), you can use the `object id` of the Azure AD entity instead.
 *
 * ## Import
 *
 * Before importing `mssql_user`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server database user using the server URL and `login name`, e.g.
 *
 * ```sh
 *  $ pulumi import mssql:index/user:User example 'mssql://example-sql-server.database.windows.net/master/user@example.com'
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mssql:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
     */
    public /*out*/ readonly authenticationType!: pulumi.Output<string>;
    /**
     * The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
     */
    public readonly defaultLanguage!: pulumi.Output<string | undefined>;
    /**
     * Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
     */
    public readonly defaultSchema!: pulumi.Output<string | undefined>;
    /**
     * The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
     */
    public readonly loginName!: pulumi.Output<string | undefined>;
    /**
     * The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
     */
    public readonly objectId!: pulumi.Output<string | undefined>;
    /**
     * The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The principal id of this database user.
     */
    public /*out*/ readonly principalId!: pulumi.Output<number>;
    /**
     * List of database roles the user has. Defaults to none.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
     */
    public readonly server!: pulumi.Output<outputs.UserServer>;
    /**
     * The name of the database user. Changing this forces a new resource to be created.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["defaultLanguage"] = state ? state.defaultLanguage : undefined;
            resourceInputs["defaultSchema"] = state ? state.defaultSchema : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["defaultLanguage"] = args ? args.defaultLanguage : undefined;
            resourceInputs["defaultSchema"] = args ? args.defaultSchema : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["authenticationType"] = undefined /*out*/;
            resourceInputs["principalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
     */
    authenticationType?: pulumi.Input<string>;
    /**
     * The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
     */
    database?: pulumi.Input<string>;
    /**
     * Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
     */
    defaultLanguage?: pulumi.Input<string>;
    /**
     * Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
     */
    defaultSchema?: pulumi.Input<string>;
    /**
     * The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
     */
    loginName?: pulumi.Input<string>;
    /**
     * The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
     */
    password?: pulumi.Input<string>;
    /**
     * The principal id of this database user.
     */
    principalId?: pulumi.Input<number>;
    /**
     * List of database roles the user has. Defaults to none.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
     */
    server?: pulumi.Input<inputs.UserServer>;
    /**
     * The name of the database user. Changing this forces a new resource to be created.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
     */
    database?: pulumi.Input<string>;
    /**
     * Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
     */
    defaultLanguage?: pulumi.Input<string>;
    /**
     * Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
     */
    defaultSchema?: pulumi.Input<string>;
    /**
     * The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
     */
    loginName?: pulumi.Input<string>;
    /**
     * The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
     */
    password?: pulumi.Input<string>;
    /**
     * List of database roles the user has. Defaults to none.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
     */
    server: pulumi.Input<inputs.UserServer>;
    /**
     * The name of the database user. Changing this forces a new resource to be created.
     */
    username: pulumi.Input<string>;
}
