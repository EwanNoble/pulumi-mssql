// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # mssql.Login
 *
 * The `mssql.Login` resource creates and manages a login on a SQL Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 *
 * const example = new mssql.Login("example", {
 *     loginName: "testlogin",
 *     server: {
 *         azureLogin: {},
 *         host: "example-sql-server.database.windows.net",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Before importing `mssql_login`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server login using the server URL and `login name`, e.g.
 *
 * ```sh
 *  $ pulumi import mssql:index/login:Login example 'mssql://example-sql-server.database.windows.net/testlogin'
 * ```
 */
export class Login extends pulumi.CustomResource {
    /**
     * Get an existing Login resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoginState, opts?: pulumi.CustomResourceOptions): Login {
        return new Login(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mssql:index/login:Login';

    /**
     * Returns true if the given object is an instance of Login.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Login {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Login.__pulumiType;
    }

    /**
     * The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
     */
    public readonly defaultDatabase!: pulumi.Output<string | undefined>;
    /**
     * The default language of this server login. Defaults to `usEnglish`. This argument does not apply to Azure SQL Database.
     */
    public readonly defaultLanguage!: pulumi.Output<string | undefined>;
    /**
     * The name of the server login. Changing this forces a new resource to be created.
     */
    public readonly loginName!: pulumi.Output<string>;
    /**
     * The password of the server login.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The principal id of this server login.
     */
    public /*out*/ readonly principalId!: pulumi.Output<number>;
    /**
     * Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
     */
    public readonly server!: pulumi.Output<outputs.LoginServer>;

    /**
     * Create a Login resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoginArgs | LoginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoginState | undefined;
            resourceInputs["defaultDatabase"] = state ? state.defaultDatabase : undefined;
            resourceInputs["defaultLanguage"] = state ? state.defaultLanguage : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
        } else {
            const args = argsOrState as LoginArgs | undefined;
            if ((!args || args.loginName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginName'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["defaultDatabase"] = args ? args.defaultDatabase : undefined;
            resourceInputs["defaultLanguage"] = args ? args.defaultLanguage : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["principalId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Login.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Login resources.
 */
export interface LoginState {
    /**
     * The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
     */
    defaultDatabase?: pulumi.Input<string>;
    /**
     * The default language of this server login. Defaults to `usEnglish`. This argument does not apply to Azure SQL Database.
     */
    defaultLanguage?: pulumi.Input<string>;
    /**
     * The name of the server login. Changing this forces a new resource to be created.
     */
    loginName?: pulumi.Input<string>;
    /**
     * The password of the server login.
     */
    password?: pulumi.Input<string>;
    /**
     * The principal id of this server login.
     */
    principalId?: pulumi.Input<number>;
    /**
     * Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
     */
    server?: pulumi.Input<inputs.LoginServer>;
}

/**
 * The set of arguments for constructing a Login resource.
 */
export interface LoginArgs {
    /**
     * The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
     */
    defaultDatabase?: pulumi.Input<string>;
    /**
     * The default language of this server login. Defaults to `usEnglish`. This argument does not apply to Azure SQL Database.
     */
    defaultLanguage?: pulumi.Input<string>;
    /**
     * The name of the server login. Changing this forces a new resource to be created.
     */
    loginName: pulumi.Input<string>;
    /**
     * The password of the server login.
     */
    password: pulumi.Input<string>;
    /**
     * Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
     */
    server: pulumi.Input<inputs.LoginServer>;
}
