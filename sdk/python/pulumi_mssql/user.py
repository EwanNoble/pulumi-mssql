# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 server: pulumi.Input['UserServerArgs'],
                 username: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input['UserServerArgs'] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        :param pulumi.Input[str] username: The name of the database user. Changing this forces a new resource to be created.
        :param pulumi.Input[str] database: The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_language: Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        :param pulumi.Input[str] default_schema: Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        :param pulumi.Input[str] login_name: The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[str] object_id: The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        :param pulumi.Input[str] password: The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of database roles the user has. Defaults to none.
        """
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "username", username)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if default_language is not None:
            pulumi.set(__self__, "default_language", default_language)
        if default_schema is not None:
            pulumi.set(__self__, "default_schema", default_schema)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input['UserServerArgs']:
        """
        Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input['UserServerArgs']):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The name of the database user. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="defaultLanguage")
    def default_language(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        """
        return pulumi.get(self, "default_language")

    @default_language.setter
    def default_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_language", value)

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        """
        return pulumi.get(self, "default_schema")

    @default_schema.setter
    def default_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_schema", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of database roles the user has. Defaults to none.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[int]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server: Optional[pulumi.Input['UserServerArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[str] authentication_type: One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
        :param pulumi.Input[str] database: The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_language: Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        :param pulumi.Input[str] default_schema: Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        :param pulumi.Input[str] login_name: The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[str] object_id: The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        :param pulumi.Input[str] password: The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[int] principal_id: The principal id of this database user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of database roles the user has. Defaults to none.
        :param pulumi.Input['UserServerArgs'] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        :param pulumi.Input[str] username: The name of the database user. Changing this forces a new resource to be created.
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if default_language is not None:
            pulumi.set(__self__, "default_language", default_language)
        if default_schema is not None:
            pulumi.set(__self__, "default_schema", default_schema)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="defaultLanguage")
    def default_language(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        """
        return pulumi.get(self, "default_language")

    @default_language.setter
    def default_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_language", value)

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        """
        return pulumi.get(self, "default_schema")

    @default_schema.setter
    def default_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_schema", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[int]]:
        """
        The principal id of this database user.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of database roles the user has. Defaults to none.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input['UserServerArgs']]:
        """
        Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input['UserServerArgs']]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database user. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server: Optional[pulumi.Input[pulumi.InputType['UserServerArgs']]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # User

        The `User` resource creates and manages a user on a SQL Server database.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mssql as mssql

        example = mssql.User("example",
            roles=["db_owner"],
            server=mssql.UserServerArgs(
                azure_login=mssql.UserServerAzureLoginArgs(
                    client_id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                    client_secret="terriblySecretSecret",
                    tenant_id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                ),
                host="example-sql-server.database.windows.net",
            ),
            username="user@example.com")
        ```

        > Note that in order to create an external user referencing an Azure AD entity (user, application), the Azure SQL Server needs to be a member of an Azure AD group assigned the Azure AD role `Directory Readers`. If it is not possible to give the Azure SQL Server this role (through the group), you can use the `object id` of the Azure AD entity instead.

        ## Import

        Before importing `mssql_user`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server database user using the server URL and `login name`, e.g.

        ```sh
         $ pulumi import mssql:index/user:User example 'mssql://example-sql-server.database.windows.net/master/user@example.com'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database: The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_language: Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        :param pulumi.Input[str] default_schema: Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        :param pulumi.Input[str] login_name: The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[str] object_id: The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        :param pulumi.Input[str] password: The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of database roles the user has. Defaults to none.
        :param pulumi.Input[pulumi.InputType['UserServerArgs']] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        :param pulumi.Input[str] username: The name of the database user. Changing this forces a new resource to be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # User

        The `User` resource creates and manages a user on a SQL Server database.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mssql as mssql

        example = mssql.User("example",
            roles=["db_owner"],
            server=mssql.UserServerArgs(
                azure_login=mssql.UserServerAzureLoginArgs(
                    client_id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                    client_secret="terriblySecretSecret",
                    tenant_id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                ),
                host="example-sql-server.database.windows.net",
            ),
            username="user@example.com")
        ```

        > Note that in order to create an external user referencing an Azure AD entity (user, application), the Azure SQL Server needs to be a member of an Azure AD group assigned the Azure AD role `Directory Readers`. If it is not possible to give the Azure SQL Server this role (through the group), you can use the `object id` of the Azure AD entity instead.

        ## Import

        Before importing `mssql_user`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server database user using the server URL and `login name`, e.g.

        ```sh
         $ pulumi import mssql:index/user:User example 'mssql://example-sql-server.database.windows.net/master/user@example.com'
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server: Optional[pulumi.Input[pulumi.InputType['UserServerArgs']]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["database"] = database
            __props__.__dict__["default_language"] = default_language
            __props__.__dict__["default_schema"] = default_schema
            __props__.__dict__["login_name"] = login_name
            __props__.__dict__["object_id"] = object_id
            __props__.__dict__["password"] = password
            __props__.__dict__["roles"] = roles
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["authentication_type"] = None
            __props__.__dict__["principal_id"] = None
        super(User, __self__).__init__(
            'mssql:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication_type: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            default_language: Optional[pulumi.Input[str]] = None,
            default_schema: Optional[pulumi.Input[str]] = None,
            login_name: Optional[pulumi.Input[str]] = None,
            object_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            principal_id: Optional[pulumi.Input[int]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            server: Optional[pulumi.Input[pulumi.InputType['UserServerArgs']]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication_type: One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
        :param pulumi.Input[str] database: The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        :param pulumi.Input[str] default_language: Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        :param pulumi.Input[str] default_schema: Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        :param pulumi.Input[str] login_name: The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[str] object_id: The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        :param pulumi.Input[str] password: The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        :param pulumi.Input[int] principal_id: The principal id of this database user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of database roles the user has. Defaults to none.
        :param pulumi.Input[pulumi.InputType['UserServerArgs']] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        :param pulumi.Input[str] username: The name of the database user. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["authentication_type"] = authentication_type
        __props__.__dict__["database"] = database
        __props__.__dict__["default_language"] = default_language
        __props__.__dict__["default_schema"] = default_schema
        __props__.__dict__["login_name"] = login_name
        __props__.__dict__["object_id"] = object_id
        __props__.__dict__["password"] = password
        __props__.__dict__["principal_id"] = principal_id
        __props__.__dict__["roles"] = roles
        __props__.__dict__["server"] = server
        __props__.__dict__["username"] = username
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Output[str]:
        """
        One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[Optional[str]]:
        """
        The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="defaultLanguage")
    def default_language(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
        """
        return pulumi.get(self, "default_language")

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
        """
        return pulumi.get(self, "default_schema")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Output[Optional[str]]:
        """
        The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Output[Optional[str]]:
        """
        The object id of the external username. Only used in azure_login auth context when AAD role delegation to sql server identity is not possible.
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password of the database user. Conflicts with the `login_name` argument. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[int]:
        """
        The principal id of this database user.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of database roles the user has. Defaults to none.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output['outputs.UserServer']:
        """
        Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The name of the database user. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "username")

