# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoginArgs', 'Login']

@pulumi.input_type
class LoginArgs:
    def __init__(__self__, *,
                 login_name: pulumi.Input[str],
                 password: pulumi.Input[str],
                 server: pulumi.Input['LoginServerArgs'],
                 default_database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Login resource.
        :param pulumi.Input[str] login_name: The name of the server login. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The password of the server login.
        :param pulumi.Input['LoginServerArgs'] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        :param pulumi.Input[str] default_database: The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] default_language: The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        """
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "server", server)
        if default_database is not None:
            pulumi.set(__self__, "default_database", default_database)
        if default_language is not None:
            pulumi.set(__self__, "default_language", default_language)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Input[str]:
        """
        The name of the server login. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of the server login.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input['LoginServerArgs']:
        """
        Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input['LoginServerArgs']):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="defaultDatabase")
    def default_database(self) -> Optional[pulumi.Input[str]]:
        """
        The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        """
        return pulumi.get(self, "default_database")

    @default_database.setter
    def default_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_database", value)

    @property
    @pulumi.getter(name="defaultLanguage")
    def default_language(self) -> Optional[pulumi.Input[str]]:
        """
        The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        """
        return pulumi.get(self, "default_language")

    @default_language.setter
    def default_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_language", value)


@pulumi.input_type
class _LoginState:
    def __init__(__self__, *,
                 default_database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 principal_id: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input['LoginServerArgs']] = None):
        """
        Input properties used for looking up and filtering Login resources.
        :param pulumi.Input[str] default_database: The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] default_language: The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] login_name: The name of the server login. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The password of the server login.
        :param pulumi.Input[int] principal_id: The principal id of this server login.
        :param pulumi.Input['LoginServerArgs'] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        if default_database is not None:
            pulumi.set(__self__, "default_database", default_database)
        if default_language is not None:
            pulumi.set(__self__, "default_language", default_language)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if principal_id is not None:
            pulumi.set(__self__, "principal_id", principal_id)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="defaultDatabase")
    def default_database(self) -> Optional[pulumi.Input[str]]:
        """
        The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        """
        return pulumi.get(self, "default_database")

    @default_database.setter
    def default_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_database", value)

    @property
    @pulumi.getter(name="defaultLanguage")
    def default_language(self) -> Optional[pulumi.Input[str]]:
        """
        The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        """
        return pulumi.get(self, "default_language")

    @default_language.setter
    def default_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_language", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the server login. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the server login.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> Optional[pulumi.Input[int]]:
        """
        The principal id of this server login.
        """
        return pulumi.get(self, "principal_id")

    @principal_id.setter
    def principal_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "principal_id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input['LoginServerArgs']]:
        """
        Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input['LoginServerArgs']]):
        pulumi.set(self, "server", value)


class Login(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[pulumi.InputType['LoginServerArgs']]] = None,
                 __props__=None):
        """
        ## # Login

        The `Login` resource creates and manages a login on a SQL Server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mssql as mssql

        example = mssql.Login("example",
            login_name="testlogin",
            server=mssql.LoginServerArgs(
                azure_login=mssql.LoginServerAzureLoginArgs(),
                host="example-sql-server.database.windows.net",
            ))
        ```

        ## Import

        Before importing `mssql_login`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server login using the server URL and `login name`, e.g.

        ```sh
         $ pulumi import mssql:index/login:Login example 'mssql://example-sql-server.database.windows.net/testlogin'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_database: The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] default_language: The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] login_name: The name of the server login. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The password of the server login.
        :param pulumi.Input[pulumi.InputType['LoginServerArgs']] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Login

        The `Login` resource creates and manages a login on a SQL Server.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mssql as mssql

        example = mssql.Login("example",
            login_name="testlogin",
            server=mssql.LoginServerArgs(
                azure_login=mssql.LoginServerAzureLoginArgs(),
                host="example-sql-server.database.windows.net",
            ))
        ```

        ## Import

        Before importing `mssql_login`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server login using the server URL and `login name`, e.g.

        ```sh
         $ pulumi import mssql:index/login:Login example 'mssql://example-sql-server.database.windows.net/testlogin'
        ```

        :param str resource_name: The name of the resource.
        :param LoginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_database: Optional[pulumi.Input[str]] = None,
                 default_language: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[pulumi.InputType['LoginServerArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoginArgs.__new__(LoginArgs)

            __props__.__dict__["default_database"] = default_database
            __props__.__dict__["default_language"] = default_language
            if login_name is None and not opts.urn:
                raise TypeError("Missing required property 'login_name'")
            __props__.__dict__["login_name"] = login_name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["principal_id"] = None
        super(Login, __self__).__init__(
            'mssql:index/login:Login',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_database: Optional[pulumi.Input[str]] = None,
            default_language: Optional[pulumi.Input[str]] = None,
            login_name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            principal_id: Optional[pulumi.Input[int]] = None,
            server: Optional[pulumi.Input[pulumi.InputType['LoginServerArgs']]] = None) -> 'Login':
        """
        Get an existing Login resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_database: The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] default_language: The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        :param pulumi.Input[str] login_name: The name of the server login. Changing this forces a new resource to be created.
        :param pulumi.Input[str] password: The password of the server login.
        :param pulumi.Input[int] principal_id: The principal id of this server login.
        :param pulumi.Input[pulumi.InputType['LoginServerArgs']] server: Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoginState.__new__(_LoginState)

        __props__.__dict__["default_database"] = default_database
        __props__.__dict__["default_language"] = default_language
        __props__.__dict__["login_name"] = login_name
        __props__.__dict__["password"] = password
        __props__.__dict__["principal_id"] = principal_id
        __props__.__dict__["server"] = server
        return Login(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultDatabase")
    def default_database(self) -> pulumi.Output[Optional[str]]:
        """
        The default database of this server login. Defaults to `master`. This argument does not apply to Azure SQL Database.
        """
        return pulumi.get(self, "default_database")

    @property
    @pulumi.getter(name="defaultLanguage")
    def default_language(self) -> pulumi.Output[Optional[str]]:
        """
        The default language of this server login. Defaults to `us_english`. This argument does not apply to Azure SQL Database.
        """
        return pulumi.get(self, "default_language")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Output[str]:
        """
        The name of the server login. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password of the server login.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> pulumi.Output[int]:
        """
        The principal id of this server login.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output['outputs.LoginServer']:
        """
        Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
        """
        return pulumi.get(self, "server")

