// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # User
//
// The `User` resource creates and manages a user on a SQL Server database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mssql/sdk/go/mssql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mssql.NewUser(ctx, "example", &mssql.UserArgs{
// 			Roles: pulumi.StringArray{
// 				pulumi.String("db_owner"),
// 			},
// 			Server: &UserServerArgs{
// 				AzureLogin: &UserServerAzureLoginArgs{
// 					ClientId:     pulumi.String("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
// 					ClientSecret: pulumi.String("terriblySecretSecret"),
// 					TenantId:     pulumi.String("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
// 				},
// 				Host: pulumi.String("example-sql-server.database.windows.net"),
// 			},
// 			Username: pulumi.String("user@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > Note that in order to create an external user referencing an Azure AD entity (user, application), the Azure SQL Server needs to be a member of an Azure AD group assigned the Azure AD role `Directory Readers`. If it is not possible to give the Azure SQL Server this role (through the group), you can use the `object id` of the Azure AD entity instead.
//
// ## Import
//
// Before importing `mssql_user`, you must to configure the authentication to your sql server1. Using Azure AD authentication, you must set the following environment variables`MSSQL_TENANT_ID`, `MSSQL_CLIENT_ID` and `MSSQL_CLIENT_SECRET`. 2. Using SQL authentication, you must set the following environment variables`MSSQL_USERNAME` and `MSSQL_PASSWORD`. After that you can import the SQL Server database user using the server URL and `login name`, e.g.
//
// ```sh
//  $ pulumi import mssql:index/user:User example 'mssql://example-sql-server.database.windows.net/master/user@example.com'
// ```
type User struct {
	pulumi.CustomResourceState

	// One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
	AuthenticationType pulumi.StringOutput `pulumi:"authenticationType"`
	// The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
	DefaultLanguage pulumi.StringPtrOutput `pulumi:"defaultLanguage"`
	// Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
	DefaultSchema pulumi.StringPtrOutput `pulumi:"defaultSchema"`
	// The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrOutput `pulumi:"loginName"`
	// The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
	ObjectId pulumi.StringPtrOutput `pulumi:"objectId"`
	// The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The principal id of this database user.
	PrincipalId pulumi.IntOutput `pulumi:"principalId"`
	// List of database roles the user has. Defaults to none.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
	Server UserServerOutput `pulumi:"server"`
	// The name of the database user. Changing this forces a new resource to be created.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource User
	err := ctx.RegisterResource("mssql:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("mssql:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
	Database *string `pulumi:"database"`
	// Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
	DefaultSchema *string `pulumi:"defaultSchema"`
	// The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
	LoginName *string `pulumi:"loginName"`
	// The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
	ObjectId *string `pulumi:"objectId"`
	// The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// The principal id of this database user.
	PrincipalId *int `pulumi:"principalId"`
	// List of database roles the user has. Defaults to none.
	Roles []string `pulumi:"roles"`
	// Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
	Server *UserServer `pulumi:"server"`
	// The name of the database user. Changing this forces a new resource to be created.
	Username *string `pulumi:"username"`
}

type UserState struct {
	// One of `DATABASE`, `INSTANCE`, or `EXTERNAL`.
	AuthenticationType pulumi.StringPtrInput
	// The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
	Database pulumi.StringPtrInput
	// Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
	DefaultLanguage pulumi.StringPtrInput
	// Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
	DefaultSchema pulumi.StringPtrInput
	// The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrInput
	// The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
	ObjectId pulumi.StringPtrInput
	// The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput
	// The principal id of this database user.
	PrincipalId pulumi.IntPtrInput
	// List of database roles the user has. Defaults to none.
	Roles pulumi.StringArrayInput
	// Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
	Server UserServerPtrInput
	// The name of the database user. Changing this forces a new resource to be created.
	Username pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
	Database *string `pulumi:"database"`
	// Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
	DefaultSchema *string `pulumi:"defaultSchema"`
	// The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
	LoginName *string `pulumi:"loginName"`
	// The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
	ObjectId *string `pulumi:"objectId"`
	// The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
	Password *string `pulumi:"password"`
	// List of database roles the user has. Defaults to none.
	Roles []string `pulumi:"roles"`
	// Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
	Server UserServer `pulumi:"server"`
	// The name of the database user. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The user will be created in this database. Defaults to `master`. Changing this forces a new resource to be created.
	Database pulumi.StringPtrInput
	// Specifies the default language for the user. If no default language is specified, the default language for the user will bed the default language of the database. This argument does not apply to Azure SQL Database or if the user is not a contained database user.
	DefaultLanguage pulumi.StringPtrInput
	// Specifies the first schema that will be searched by the server when it resolves the names of objects for this database user. Defaults to `dbo`.
	DefaultSchema pulumi.StringPtrInput
	// The login name of the database user. This must refer to an existing SQL Server login name. Conflicts with the `password` argument. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrInput
	// The object id of the external username. Only used in azureLogin auth context when AAD role delegation to sql server identity is not possible.
	ObjectId pulumi.StringPtrInput
	// The password of the database user. Conflicts with the `loginName` argument. Changing this forces a new resource to be created.
	Password pulumi.StringPtrInput
	// List of database roles the user has. Defaults to none.
	Roles pulumi.StringArrayInput
	// Server and login details for the SQL Server. The attributes supported in the `server` block is detailed below.
	Server UserServerInput
	// The name of the database user. Changing this forces a new resource to be created.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//          UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//          UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
