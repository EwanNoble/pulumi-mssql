// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoginServer struct {
	// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
	AzureLogin *LoginServerAzureLogin `pulumi:"azureLogin"`
	// The host of the SQL Server. Changing this forces a new resource to be created.
	Host string `pulumi:"host"`
	// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
	Login *LoginServerLogin `pulumi:"login"`
	// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
	Port *string `pulumi:"port"`
}

// LoginServerInput is an input type that accepts LoginServerArgs and LoginServerOutput values.
// You can construct a concrete instance of `LoginServerInput` via:
//
//          LoginServerArgs{...}
type LoginServerInput interface {
	pulumi.Input

	ToLoginServerOutput() LoginServerOutput
	ToLoginServerOutputWithContext(context.Context) LoginServerOutput
}

type LoginServerArgs struct {
	// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
	AzureLogin LoginServerAzureLoginPtrInput `pulumi:"azureLogin"`
	// The host of the SQL Server. Changing this forces a new resource to be created.
	Host pulumi.StringInput `pulumi:"host"`
	// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
	Login LoginServerLoginPtrInput `pulumi:"login"`
	// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (LoginServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServer)(nil)).Elem()
}

func (i LoginServerArgs) ToLoginServerOutput() LoginServerOutput {
	return i.ToLoginServerOutputWithContext(context.Background())
}

func (i LoginServerArgs) ToLoginServerOutputWithContext(ctx context.Context) LoginServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerOutput)
}

func (i LoginServerArgs) ToLoginServerPtrOutput() LoginServerPtrOutput {
	return i.ToLoginServerPtrOutputWithContext(context.Background())
}

func (i LoginServerArgs) ToLoginServerPtrOutputWithContext(ctx context.Context) LoginServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerOutput).ToLoginServerPtrOutputWithContext(ctx)
}

// LoginServerPtrInput is an input type that accepts LoginServerArgs, LoginServerPtr and LoginServerPtrOutput values.
// You can construct a concrete instance of `LoginServerPtrInput` via:
//
//          LoginServerArgs{...}
//
//  or:
//
//          nil
type LoginServerPtrInput interface {
	pulumi.Input

	ToLoginServerPtrOutput() LoginServerPtrOutput
	ToLoginServerPtrOutputWithContext(context.Context) LoginServerPtrOutput
}

type loginServerPtrType LoginServerArgs

func LoginServerPtr(v *LoginServerArgs) LoginServerPtrInput {
	return (*loginServerPtrType)(v)
}

func (*loginServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServer)(nil)).Elem()
}

func (i *loginServerPtrType) ToLoginServerPtrOutput() LoginServerPtrOutput {
	return i.ToLoginServerPtrOutputWithContext(context.Background())
}

func (i *loginServerPtrType) ToLoginServerPtrOutputWithContext(ctx context.Context) LoginServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerPtrOutput)
}

type LoginServerOutput struct{ *pulumi.OutputState }

func (LoginServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServer)(nil)).Elem()
}

func (o LoginServerOutput) ToLoginServerOutput() LoginServerOutput {
	return o
}

func (o LoginServerOutput) ToLoginServerOutputWithContext(ctx context.Context) LoginServerOutput {
	return o
}

func (o LoginServerOutput) ToLoginServerPtrOutput() LoginServerPtrOutput {
	return o.ToLoginServerPtrOutputWithContext(context.Background())
}

func (o LoginServerOutput) ToLoginServerPtrOutputWithContext(ctx context.Context) LoginServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginServer) *LoginServer {
		return &v
	}).(LoginServerPtrOutput)
}

// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
func (o LoginServerOutput) AzureLogin() LoginServerAzureLoginPtrOutput {
	return o.ApplyT(func(v LoginServer) *LoginServerAzureLogin { return v.AzureLogin }).(LoginServerAzureLoginPtrOutput)
}

// The host of the SQL Server. Changing this forces a new resource to be created.
func (o LoginServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServer) string { return v.Host }).(pulumi.StringOutput)
}

// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
func (o LoginServerOutput) Login() LoginServerLoginPtrOutput {
	return o.ApplyT(func(v LoginServer) *LoginServerLogin { return v.Login }).(LoginServerLoginPtrOutput)
}

// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
func (o LoginServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoginServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type LoginServerPtrOutput struct{ *pulumi.OutputState }

func (LoginServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServer)(nil)).Elem()
}

func (o LoginServerPtrOutput) ToLoginServerPtrOutput() LoginServerPtrOutput {
	return o
}

func (o LoginServerPtrOutput) ToLoginServerPtrOutputWithContext(ctx context.Context) LoginServerPtrOutput {
	return o
}

func (o LoginServerPtrOutput) Elem() LoginServerOutput {
	return o.ApplyT(func(v *LoginServer) LoginServer {
		if v != nil {
			return *v
		}
		var ret LoginServer
		return ret
	}).(LoginServerOutput)
}

// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
func (o LoginServerPtrOutput) AzureLogin() LoginServerAzureLoginPtrOutput {
	return o.ApplyT(func(v *LoginServer) *LoginServerAzureLogin {
		if v == nil {
			return nil
		}
		return v.AzureLogin
	}).(LoginServerAzureLoginPtrOutput)
}

// The host of the SQL Server. Changing this forces a new resource to be created.
func (o LoginServerPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServer) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
func (o LoginServerPtrOutput) Login() LoginServerLoginPtrOutput {
	return o.ApplyT(func(v *LoginServer) *LoginServerLogin {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginServerLoginPtrOutput)
}

// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
func (o LoginServerPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServer) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

type LoginServerAzureLogin struct {
	// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
	ClientId string `pulumi:"clientId"`
	// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
	ClientSecret string `pulumi:"clientSecret"`
	// The tanant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
	TenantId string `pulumi:"tenantId"`
}

// LoginServerAzureLoginInput is an input type that accepts LoginServerAzureLoginArgs and LoginServerAzureLoginOutput values.
// You can construct a concrete instance of `LoginServerAzureLoginInput` via:
//
//          LoginServerAzureLoginArgs{...}
type LoginServerAzureLoginInput interface {
	pulumi.Input

	ToLoginServerAzureLoginOutput() LoginServerAzureLoginOutput
	ToLoginServerAzureLoginOutputWithContext(context.Context) LoginServerAzureLoginOutput
}

type LoginServerAzureLoginArgs struct {
	// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The tanant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (LoginServerAzureLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServerAzureLogin)(nil)).Elem()
}

func (i LoginServerAzureLoginArgs) ToLoginServerAzureLoginOutput() LoginServerAzureLoginOutput {
	return i.ToLoginServerAzureLoginOutputWithContext(context.Background())
}

func (i LoginServerAzureLoginArgs) ToLoginServerAzureLoginOutputWithContext(ctx context.Context) LoginServerAzureLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerAzureLoginOutput)
}

func (i LoginServerAzureLoginArgs) ToLoginServerAzureLoginPtrOutput() LoginServerAzureLoginPtrOutput {
	return i.ToLoginServerAzureLoginPtrOutputWithContext(context.Background())
}

func (i LoginServerAzureLoginArgs) ToLoginServerAzureLoginPtrOutputWithContext(ctx context.Context) LoginServerAzureLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerAzureLoginOutput).ToLoginServerAzureLoginPtrOutputWithContext(ctx)
}

// LoginServerAzureLoginPtrInput is an input type that accepts LoginServerAzureLoginArgs, LoginServerAzureLoginPtr and LoginServerAzureLoginPtrOutput values.
// You can construct a concrete instance of `LoginServerAzureLoginPtrInput` via:
//
//          LoginServerAzureLoginArgs{...}
//
//  or:
//
//          nil
type LoginServerAzureLoginPtrInput interface {
	pulumi.Input

	ToLoginServerAzureLoginPtrOutput() LoginServerAzureLoginPtrOutput
	ToLoginServerAzureLoginPtrOutputWithContext(context.Context) LoginServerAzureLoginPtrOutput
}

type loginServerAzureLoginPtrType LoginServerAzureLoginArgs

func LoginServerAzureLoginPtr(v *LoginServerAzureLoginArgs) LoginServerAzureLoginPtrInput {
	return (*loginServerAzureLoginPtrType)(v)
}

func (*loginServerAzureLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServerAzureLogin)(nil)).Elem()
}

func (i *loginServerAzureLoginPtrType) ToLoginServerAzureLoginPtrOutput() LoginServerAzureLoginPtrOutput {
	return i.ToLoginServerAzureLoginPtrOutputWithContext(context.Background())
}

func (i *loginServerAzureLoginPtrType) ToLoginServerAzureLoginPtrOutputWithContext(ctx context.Context) LoginServerAzureLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerAzureLoginPtrOutput)
}

type LoginServerAzureLoginOutput struct{ *pulumi.OutputState }

func (LoginServerAzureLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServerAzureLogin)(nil)).Elem()
}

func (o LoginServerAzureLoginOutput) ToLoginServerAzureLoginOutput() LoginServerAzureLoginOutput {
	return o
}

func (o LoginServerAzureLoginOutput) ToLoginServerAzureLoginOutputWithContext(ctx context.Context) LoginServerAzureLoginOutput {
	return o
}

func (o LoginServerAzureLoginOutput) ToLoginServerAzureLoginPtrOutput() LoginServerAzureLoginPtrOutput {
	return o.ToLoginServerAzureLoginPtrOutputWithContext(context.Background())
}

func (o LoginServerAzureLoginOutput) ToLoginServerAzureLoginPtrOutputWithContext(ctx context.Context) LoginServerAzureLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginServerAzureLogin) *LoginServerAzureLogin {
		return &v
	}).(LoginServerAzureLoginPtrOutput)
}

// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
func (o LoginServerAzureLoginOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServerAzureLogin) string { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
func (o LoginServerAzureLoginOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServerAzureLogin) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// The tanant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
func (o LoginServerAzureLoginOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServerAzureLogin) string { return v.TenantId }).(pulumi.StringOutput)
}

type LoginServerAzureLoginPtrOutput struct{ *pulumi.OutputState }

func (LoginServerAzureLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServerAzureLogin)(nil)).Elem()
}

func (o LoginServerAzureLoginPtrOutput) ToLoginServerAzureLoginPtrOutput() LoginServerAzureLoginPtrOutput {
	return o
}

func (o LoginServerAzureLoginPtrOutput) ToLoginServerAzureLoginPtrOutputWithContext(ctx context.Context) LoginServerAzureLoginPtrOutput {
	return o
}

func (o LoginServerAzureLoginPtrOutput) Elem() LoginServerAzureLoginOutput {
	return o.ApplyT(func(v *LoginServerAzureLogin) LoginServerAzureLogin {
		if v != nil {
			return *v
		}
		var ret LoginServerAzureLogin
		return ret
	}).(LoginServerAzureLoginOutput)
}

// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
func (o LoginServerAzureLoginPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServerAzureLogin) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
func (o LoginServerAzureLoginPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServerAzureLogin) *string {
		if v == nil {
			return nil
		}
		return &v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The tanant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
func (o LoginServerAzureLoginPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServerAzureLogin) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type LoginServerLogin struct {
	// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
	Password string `pulumi:"password"`
	// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
	Username string `pulumi:"username"`
}

// LoginServerLoginInput is an input type that accepts LoginServerLoginArgs and LoginServerLoginOutput values.
// You can construct a concrete instance of `LoginServerLoginInput` via:
//
//          LoginServerLoginArgs{...}
type LoginServerLoginInput interface {
	pulumi.Input

	ToLoginServerLoginOutput() LoginServerLoginOutput
	ToLoginServerLoginOutputWithContext(context.Context) LoginServerLoginOutput
}

type LoginServerLoginArgs struct {
	// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
	Username pulumi.StringInput `pulumi:"username"`
}

func (LoginServerLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServerLogin)(nil)).Elem()
}

func (i LoginServerLoginArgs) ToLoginServerLoginOutput() LoginServerLoginOutput {
	return i.ToLoginServerLoginOutputWithContext(context.Background())
}

func (i LoginServerLoginArgs) ToLoginServerLoginOutputWithContext(ctx context.Context) LoginServerLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerLoginOutput)
}

func (i LoginServerLoginArgs) ToLoginServerLoginPtrOutput() LoginServerLoginPtrOutput {
	return i.ToLoginServerLoginPtrOutputWithContext(context.Background())
}

func (i LoginServerLoginArgs) ToLoginServerLoginPtrOutputWithContext(ctx context.Context) LoginServerLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerLoginOutput).ToLoginServerLoginPtrOutputWithContext(ctx)
}

// LoginServerLoginPtrInput is an input type that accepts LoginServerLoginArgs, LoginServerLoginPtr and LoginServerLoginPtrOutput values.
// You can construct a concrete instance of `LoginServerLoginPtrInput` via:
//
//          LoginServerLoginArgs{...}
//
//  or:
//
//          nil
type LoginServerLoginPtrInput interface {
	pulumi.Input

	ToLoginServerLoginPtrOutput() LoginServerLoginPtrOutput
	ToLoginServerLoginPtrOutputWithContext(context.Context) LoginServerLoginPtrOutput
}

type loginServerLoginPtrType LoginServerLoginArgs

func LoginServerLoginPtr(v *LoginServerLoginArgs) LoginServerLoginPtrInput {
	return (*loginServerLoginPtrType)(v)
}

func (*loginServerLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServerLogin)(nil)).Elem()
}

func (i *loginServerLoginPtrType) ToLoginServerLoginPtrOutput() LoginServerLoginPtrOutput {
	return i.ToLoginServerLoginPtrOutputWithContext(context.Background())
}

func (i *loginServerLoginPtrType) ToLoginServerLoginPtrOutputWithContext(ctx context.Context) LoginServerLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginServerLoginPtrOutput)
}

type LoginServerLoginOutput struct{ *pulumi.OutputState }

func (LoginServerLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginServerLogin)(nil)).Elem()
}

func (o LoginServerLoginOutput) ToLoginServerLoginOutput() LoginServerLoginOutput {
	return o
}

func (o LoginServerLoginOutput) ToLoginServerLoginOutputWithContext(ctx context.Context) LoginServerLoginOutput {
	return o
}

func (o LoginServerLoginOutput) ToLoginServerLoginPtrOutput() LoginServerLoginPtrOutput {
	return o.ToLoginServerLoginPtrOutputWithContext(context.Background())
}

func (o LoginServerLoginOutput) ToLoginServerLoginPtrOutputWithContext(ctx context.Context) LoginServerLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginServerLogin) *LoginServerLogin {
		return &v
	}).(LoginServerLoginPtrOutput)
}

// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
func (o LoginServerLoginOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServerLogin) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
func (o LoginServerLoginOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LoginServerLogin) string { return v.Username }).(pulumi.StringOutput)
}

type LoginServerLoginPtrOutput struct{ *pulumi.OutputState }

func (LoginServerLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginServerLogin)(nil)).Elem()
}

func (o LoginServerLoginPtrOutput) ToLoginServerLoginPtrOutput() LoginServerLoginPtrOutput {
	return o
}

func (o LoginServerLoginPtrOutput) ToLoginServerLoginPtrOutputWithContext(ctx context.Context) LoginServerLoginPtrOutput {
	return o
}

func (o LoginServerLoginPtrOutput) Elem() LoginServerLoginOutput {
	return o.ApplyT(func(v *LoginServerLogin) LoginServerLogin {
		if v != nil {
			return *v
		}
		var ret LoginServerLogin
		return ret
	}).(LoginServerLoginOutput)
}

// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
func (o LoginServerLoginPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServerLogin) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
func (o LoginServerLoginPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginServerLogin) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type UserServer struct {
	// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
	AzureLogin *UserServerAzureLogin `pulumi:"azureLogin"`
	// The host of the SQL Server. Changing this forces a new resource to be created.
	Host string `pulumi:"host"`
	// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
	Login *UserServerLogin `pulumi:"login"`
	// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
	Port *string `pulumi:"port"`
}

// UserServerInput is an input type that accepts UserServerArgs and UserServerOutput values.
// You can construct a concrete instance of `UserServerInput` via:
//
//          UserServerArgs{...}
type UserServerInput interface {
	pulumi.Input

	ToUserServerOutput() UserServerOutput
	ToUserServerOutputWithContext(context.Context) UserServerOutput
}

type UserServerArgs struct {
	// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
	AzureLogin UserServerAzureLoginPtrInput `pulumi:"azureLogin"`
	// The host of the SQL Server. Changing this forces a new resource to be created.
	Host pulumi.StringInput `pulumi:"host"`
	// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
	Login UserServerLoginPtrInput `pulumi:"login"`
	// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
	Port pulumi.StringPtrInput `pulumi:"port"`
}

func (UserServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserServer)(nil)).Elem()
}

func (i UserServerArgs) ToUserServerOutput() UserServerOutput {
	return i.ToUserServerOutputWithContext(context.Background())
}

func (i UserServerArgs) ToUserServerOutputWithContext(ctx context.Context) UserServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerOutput)
}

func (i UserServerArgs) ToUserServerPtrOutput() UserServerPtrOutput {
	return i.ToUserServerPtrOutputWithContext(context.Background())
}

func (i UserServerArgs) ToUserServerPtrOutputWithContext(ctx context.Context) UserServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerOutput).ToUserServerPtrOutputWithContext(ctx)
}

// UserServerPtrInput is an input type that accepts UserServerArgs, UserServerPtr and UserServerPtrOutput values.
// You can construct a concrete instance of `UserServerPtrInput` via:
//
//          UserServerArgs{...}
//
//  or:
//
//          nil
type UserServerPtrInput interface {
	pulumi.Input

	ToUserServerPtrOutput() UserServerPtrOutput
	ToUserServerPtrOutputWithContext(context.Context) UserServerPtrOutput
}

type userServerPtrType UserServerArgs

func UserServerPtr(v *UserServerArgs) UserServerPtrInput {
	return (*userServerPtrType)(v)
}

func (*userServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServer)(nil)).Elem()
}

func (i *userServerPtrType) ToUserServerPtrOutput() UserServerPtrOutput {
	return i.ToUserServerPtrOutputWithContext(context.Background())
}

func (i *userServerPtrType) ToUserServerPtrOutputWithContext(ctx context.Context) UserServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerPtrOutput)
}

type UserServerOutput struct{ *pulumi.OutputState }

func (UserServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserServer)(nil)).Elem()
}

func (o UserServerOutput) ToUserServerOutput() UserServerOutput {
	return o
}

func (o UserServerOutput) ToUserServerOutputWithContext(ctx context.Context) UserServerOutput {
	return o
}

func (o UserServerOutput) ToUserServerPtrOutput() UserServerPtrOutput {
	return o.ToUserServerPtrOutputWithContext(context.Background())
}

func (o UserServerOutput) ToUserServerPtrOutputWithContext(ctx context.Context) UserServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserServer) *UserServer {
		return &v
	}).(UserServerPtrOutput)
}

// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
func (o UserServerOutput) AzureLogin() UserServerAzureLoginPtrOutput {
	return o.ApplyT(func(v UserServer) *UserServerAzureLogin { return v.AzureLogin }).(UserServerAzureLoginPtrOutput)
}

// The host of the SQL Server. Changing this forces a new resource to be created.
func (o UserServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v UserServer) string { return v.Host }).(pulumi.StringOutput)
}

// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
func (o UserServerOutput) Login() UserServerLoginPtrOutput {
	return o.ApplyT(func(v UserServer) *UserServerLogin { return v.Login }).(UserServerLoginPtrOutput)
}

// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
func (o UserServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

type UserServerPtrOutput struct{ *pulumi.OutputState }

func (UserServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServer)(nil)).Elem()
}

func (o UserServerPtrOutput) ToUserServerPtrOutput() UserServerPtrOutput {
	return o
}

func (o UserServerPtrOutput) ToUserServerPtrOutputWithContext(ctx context.Context) UserServerPtrOutput {
	return o
}

func (o UserServerPtrOutput) Elem() UserServerOutput {
	return o.ApplyT(func(v *UserServer) UserServer {
		if v != nil {
			return *v
		}
		var ret UserServer
		return ret
	}).(UserServerOutput)
}

// Azure AD login for managing the database resources. The attributes supported in the `azureLogin` block is detailed below.
func (o UserServerPtrOutput) AzureLogin() UserServerAzureLoginPtrOutput {
	return o.ApplyT(func(v *UserServer) *UserServerAzureLogin {
		if v == nil {
			return nil
		}
		return v.AzureLogin
	}).(UserServerAzureLoginPtrOutput)
}

// The host of the SQL Server. Changing this forces a new resource to be created.
func (o UserServerPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServer) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// SQL Server login for managing the database resources. The attributes supported in the `login` block is detailed below.
func (o UserServerPtrOutput) Login() UserServerLoginPtrOutput {
	return o.ApplyT(func(v *UserServer) *UserServerLogin {
		if v == nil {
			return nil
		}
		return v.Login
	}).(UserServerLoginPtrOutput)
}

// The port of the SQL Server. Defaults to `1433`. Changing this forces a new resource to be created.
func (o UserServerPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServer) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

type UserServerAzureLogin struct {
	// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
	ClientId string `pulumi:"clientId"`
	// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
	ClientSecret string `pulumi:"clientSecret"`
	// The tenant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
	TenantId string `pulumi:"tenantId"`
}

// UserServerAzureLoginInput is an input type that accepts UserServerAzureLoginArgs and UserServerAzureLoginOutput values.
// You can construct a concrete instance of `UserServerAzureLoginInput` via:
//
//          UserServerAzureLoginArgs{...}
type UserServerAzureLoginInput interface {
	pulumi.Input

	ToUserServerAzureLoginOutput() UserServerAzureLoginOutput
	ToUserServerAzureLoginOutputWithContext(context.Context) UserServerAzureLoginOutput
}

type UserServerAzureLoginArgs struct {
	// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The tenant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (UserServerAzureLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserServerAzureLogin)(nil)).Elem()
}

func (i UserServerAzureLoginArgs) ToUserServerAzureLoginOutput() UserServerAzureLoginOutput {
	return i.ToUserServerAzureLoginOutputWithContext(context.Background())
}

func (i UserServerAzureLoginArgs) ToUserServerAzureLoginOutputWithContext(ctx context.Context) UserServerAzureLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerAzureLoginOutput)
}

func (i UserServerAzureLoginArgs) ToUserServerAzureLoginPtrOutput() UserServerAzureLoginPtrOutput {
	return i.ToUserServerAzureLoginPtrOutputWithContext(context.Background())
}

func (i UserServerAzureLoginArgs) ToUserServerAzureLoginPtrOutputWithContext(ctx context.Context) UserServerAzureLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerAzureLoginOutput).ToUserServerAzureLoginPtrOutputWithContext(ctx)
}

// UserServerAzureLoginPtrInput is an input type that accepts UserServerAzureLoginArgs, UserServerAzureLoginPtr and UserServerAzureLoginPtrOutput values.
// You can construct a concrete instance of `UserServerAzureLoginPtrInput` via:
//
//          UserServerAzureLoginArgs{...}
//
//  or:
//
//          nil
type UserServerAzureLoginPtrInput interface {
	pulumi.Input

	ToUserServerAzureLoginPtrOutput() UserServerAzureLoginPtrOutput
	ToUserServerAzureLoginPtrOutputWithContext(context.Context) UserServerAzureLoginPtrOutput
}

type userServerAzureLoginPtrType UserServerAzureLoginArgs

func UserServerAzureLoginPtr(v *UserServerAzureLoginArgs) UserServerAzureLoginPtrInput {
	return (*userServerAzureLoginPtrType)(v)
}

func (*userServerAzureLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServerAzureLogin)(nil)).Elem()
}

func (i *userServerAzureLoginPtrType) ToUserServerAzureLoginPtrOutput() UserServerAzureLoginPtrOutput {
	return i.ToUserServerAzureLoginPtrOutputWithContext(context.Background())
}

func (i *userServerAzureLoginPtrType) ToUserServerAzureLoginPtrOutputWithContext(ctx context.Context) UserServerAzureLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerAzureLoginPtrOutput)
}

type UserServerAzureLoginOutput struct{ *pulumi.OutputState }

func (UserServerAzureLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserServerAzureLogin)(nil)).Elem()
}

func (o UserServerAzureLoginOutput) ToUserServerAzureLoginOutput() UserServerAzureLoginOutput {
	return o
}

func (o UserServerAzureLoginOutput) ToUserServerAzureLoginOutputWithContext(ctx context.Context) UserServerAzureLoginOutput {
	return o
}

func (o UserServerAzureLoginOutput) ToUserServerAzureLoginPtrOutput() UserServerAzureLoginPtrOutput {
	return o.ToUserServerAzureLoginPtrOutputWithContext(context.Background())
}

func (o UserServerAzureLoginOutput) ToUserServerAzureLoginPtrOutputWithContext(ctx context.Context) UserServerAzureLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserServerAzureLogin) *UserServerAzureLogin {
		return &v
	}).(UserServerAzureLoginPtrOutput)
}

// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
func (o UserServerAzureLoginOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserServerAzureLogin) string { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
func (o UserServerAzureLoginOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v UserServerAzureLogin) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// The tenant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
func (o UserServerAzureLoginOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v UserServerAzureLogin) string { return v.TenantId }).(pulumi.StringOutput)
}

type UserServerAzureLoginPtrOutput struct{ *pulumi.OutputState }

func (UserServerAzureLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServerAzureLogin)(nil)).Elem()
}

func (o UserServerAzureLoginPtrOutput) ToUserServerAzureLoginPtrOutput() UserServerAzureLoginPtrOutput {
	return o
}

func (o UserServerAzureLoginPtrOutput) ToUserServerAzureLoginPtrOutputWithContext(ctx context.Context) UserServerAzureLoginPtrOutput {
	return o
}

func (o UserServerAzureLoginPtrOutput) Elem() UserServerAzureLoginOutput {
	return o.ApplyT(func(v *UserServerAzureLogin) UserServerAzureLogin {
		if v != nil {
			return *v
		}
		var ret UserServerAzureLogin
		return ret
	}).(UserServerAzureLoginOutput)
}

// The client ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_ID` environment variable.
func (o UserServerAzureLoginPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServerAzureLogin) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_CLIENT_SECRET` environment variable.
func (o UserServerAzureLoginPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServerAzureLogin) *string {
		if v == nil {
			return nil
		}
		return &v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the principal used to login to the SQL Server. Can also be sourced from the `MSSQL_TENANT_ID` environment variable.
func (o UserServerAzureLoginPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServerAzureLogin) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type UserServerLogin struct {
	// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
	Password string `pulumi:"password"`
	// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
	Username string `pulumi:"username"`
}

// UserServerLoginInput is an input type that accepts UserServerLoginArgs and UserServerLoginOutput values.
// You can construct a concrete instance of `UserServerLoginInput` via:
//
//          UserServerLoginArgs{...}
type UserServerLoginInput interface {
	pulumi.Input

	ToUserServerLoginOutput() UserServerLoginOutput
	ToUserServerLoginOutputWithContext(context.Context) UserServerLoginOutput
}

type UserServerLoginArgs struct {
	// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
	Username pulumi.StringInput `pulumi:"username"`
}

func (UserServerLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserServerLogin)(nil)).Elem()
}

func (i UserServerLoginArgs) ToUserServerLoginOutput() UserServerLoginOutput {
	return i.ToUserServerLoginOutputWithContext(context.Background())
}

func (i UserServerLoginArgs) ToUserServerLoginOutputWithContext(ctx context.Context) UserServerLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerLoginOutput)
}

func (i UserServerLoginArgs) ToUserServerLoginPtrOutput() UserServerLoginPtrOutput {
	return i.ToUserServerLoginPtrOutputWithContext(context.Background())
}

func (i UserServerLoginArgs) ToUserServerLoginPtrOutputWithContext(ctx context.Context) UserServerLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerLoginOutput).ToUserServerLoginPtrOutputWithContext(ctx)
}

// UserServerLoginPtrInput is an input type that accepts UserServerLoginArgs, UserServerLoginPtr and UserServerLoginPtrOutput values.
// You can construct a concrete instance of `UserServerLoginPtrInput` via:
//
//          UserServerLoginArgs{...}
//
//  or:
//
//          nil
type UserServerLoginPtrInput interface {
	pulumi.Input

	ToUserServerLoginPtrOutput() UserServerLoginPtrOutput
	ToUserServerLoginPtrOutputWithContext(context.Context) UserServerLoginPtrOutput
}

type userServerLoginPtrType UserServerLoginArgs

func UserServerLoginPtr(v *UserServerLoginArgs) UserServerLoginPtrInput {
	return (*userServerLoginPtrType)(v)
}

func (*userServerLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServerLogin)(nil)).Elem()
}

func (i *userServerLoginPtrType) ToUserServerLoginPtrOutput() UserServerLoginPtrOutput {
	return i.ToUserServerLoginPtrOutputWithContext(context.Background())
}

func (i *userServerLoginPtrType) ToUserServerLoginPtrOutputWithContext(ctx context.Context) UserServerLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserServerLoginPtrOutput)
}

type UserServerLoginOutput struct{ *pulumi.OutputState }

func (UserServerLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserServerLogin)(nil)).Elem()
}

func (o UserServerLoginOutput) ToUserServerLoginOutput() UserServerLoginOutput {
	return o
}

func (o UserServerLoginOutput) ToUserServerLoginOutputWithContext(ctx context.Context) UserServerLoginOutput {
	return o
}

func (o UserServerLoginOutput) ToUserServerLoginPtrOutput() UserServerLoginPtrOutput {
	return o.ToUserServerLoginPtrOutputWithContext(context.Background())
}

func (o UserServerLoginOutput) ToUserServerLoginPtrOutputWithContext(ctx context.Context) UserServerLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserServerLogin) *UserServerLogin {
		return &v
	}).(UserServerLoginPtrOutput)
}

// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
func (o UserServerLoginOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserServerLogin) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
func (o UserServerLoginOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v UserServerLogin) string { return v.Username }).(pulumi.StringOutput)
}

type UserServerLoginPtrOutput struct{ *pulumi.OutputState }

func (UserServerLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserServerLogin)(nil)).Elem()
}

func (o UserServerLoginPtrOutput) ToUserServerLoginPtrOutput() UserServerLoginPtrOutput {
	return o
}

func (o UserServerLoginPtrOutput) ToUserServerLoginPtrOutputWithContext(ctx context.Context) UserServerLoginPtrOutput {
	return o
}

func (o UserServerLoginPtrOutput) Elem() UserServerLoginOutput {
	return o.ApplyT(func(v *UserServerLogin) UserServerLogin {
		if v != nil {
			return *v
		}
		var ret UserServerLogin
		return ret
	}).(UserServerLoginOutput)
}

// The password of the SQL Server login. Can also be sourced from the `MSSQL_PASSWORD` environment variable.
func (o UserServerLoginPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServerLogin) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The username of the SQL Server login. Can also be sourced from the `MSSQL_USERNAME` environment variable.
func (o UserServerLoginPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserServerLogin) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoginServerInput)(nil)).Elem(), LoginServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoginServerPtrInput)(nil)).Elem(), LoginServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoginServerAzureLoginInput)(nil)).Elem(), LoginServerAzureLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoginServerAzureLoginPtrInput)(nil)).Elem(), LoginServerAzureLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoginServerLoginInput)(nil)).Elem(), LoginServerLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoginServerLoginPtrInput)(nil)).Elem(), LoginServerLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserServerInput)(nil)).Elem(), UserServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserServerPtrInput)(nil)).Elem(), UserServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserServerAzureLoginInput)(nil)).Elem(), UserServerAzureLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserServerAzureLoginPtrInput)(nil)).Elem(), UserServerAzureLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserServerLoginInput)(nil)).Elem(), UserServerLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserServerLoginPtrInput)(nil)).Elem(), UserServerLoginArgs{})
	pulumi.RegisterOutputType(LoginServerOutput{})
	pulumi.RegisterOutputType(LoginServerPtrOutput{})
	pulumi.RegisterOutputType(LoginServerAzureLoginOutput{})
	pulumi.RegisterOutputType(LoginServerAzureLoginPtrOutput{})
	pulumi.RegisterOutputType(LoginServerLoginOutput{})
	pulumi.RegisterOutputType(LoginServerLoginPtrOutput{})
	pulumi.RegisterOutputType(UserServerOutput{})
	pulumi.RegisterOutputType(UserServerPtrOutput{})
	pulumi.RegisterOutputType(UserServerAzureLoginOutput{})
	pulumi.RegisterOutputType(UserServerAzureLoginPtrOutput{})
	pulumi.RegisterOutputType(UserServerLoginOutput{})
	pulumi.RegisterOutputType(UserServerLoginPtrOutput{})
}
